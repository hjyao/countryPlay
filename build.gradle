apply plugin: 'idea'
apply plugin: 'jetty'
apply plugin: "jacoco"

ext {
    expectedLineCoverage = 50
    expectedBranchCoverage = 60
}

[jettyRun, jettyRunWar, jettyStop]*.stopPort = 8081
[jettyRun, jettyRunWar, jettyStop]*.stopKey = 'stopKey'

war.archiveName "freewheelers.war"

jettyRun.contextPath = '/'

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

repositories {
    mavenCentral()
}

sourceSets {
    functionalTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }

    integrationTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    functionalTestCompile.extendsFrom testCompile
    functionalTestRuntime.extendsFrom testRuntime
}


dependencies {
    compile 'org.springframework:spring-webmvc:3.2.6.RELEASE'
    compile 'org.springframework:spring-jdbc:3.1.0.RELEASE'
    compile 'org.mybatis:mybatis:3.2.1'
    compile 'log4j:log4j:1.2.17'
    compile 'org.hibernate:hibernate-validator:4.2.0.Final'
    compile 'org.springframework.security:spring-security-taglibs:3.1.3.RELEASE'
    compile 'org.springframework.security:spring-security-config:3.1.3.RELEASE'
    compile 'postgresql:postgresql:9.1-901.jdbc4'
    providedCompile 'javax.servlet:servlet-api:2.5'
    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'org.apache.httpcomponents:httpclient:4.2.1'
    testCompile 'org.springframework:spring-test:3.2.6.RELEASE'
    testCompile 'org.seleniumhq.selenium:selenium-java:2.42.2'
}


task createDB(type: Exec) {
    workingDir 'db'
    commandLine './create.sh'
}


task initDB(type: Exec) {
    workingDir 'db/migrations'
    commandLine './mybatis/bin/migrate', 'up'
}


task integrationTest(type: Test) {
    mustRunAfter test
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task functionalTest(type: Test) {
    mustRunAfter integrationTest
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath + sourceSets.main.runtimeClasspath

    doFirst {
        jettyRun.daemon = true
        jettyRun.execute()
    }

    doLast {
        jettyStop.execute()
    }
}


initDB.dependsOn createDB
integrationTest.dependsOn initDB
functionalTest.dependsOn initDB
build.dependsOn integrationTest
build.dependsOn functionalTest

task dist(type: Zip) {
    from('.') {
        include 'db/'
        include 'scripts/'
    }

    from('jetty-runner') {
        include 'jetty-runner-8.1.14.v20131031.jar'
    }

    from war.outputs.files
    archiveName 'freewheelers.zip'
}

task checkTestCoverage << {
    def coverageReportPath = "build/reports/jacoco/test/html/index.html"
    def coverageFile = new File(coverageReportPath)
    def matcher = ( coverageFile.text =~ /<tfoot>(.*)<\/tfoot>/ )
    def coverageString = new XmlParser().parseText(matcher[0][0])

    def lineCoverageString = coverageString.tr.td[2].text()
    def branchCoverageString = coverageString.tr.td[4].text()
    def actualLineCoverage=  lineCoverageString.substring(0,lineCoverageString.length() - 1).toInteger()
    def actualBranchCoverage=  branchCoverageString.substring(0,branchCoverageString.length() - 1).toInteger()

    if(actualLineCoverage < expectedLineCoverage )
    {
        throw new RuntimeException("Code line coverage is "+actualLineCoverage+"%, but expected is "+expectedLineCoverage+"%.\n"+"Please check "+coverageReportPath +" for more detail.")
    }

    if(actualBranchCoverage < expectedBranchCoverage )
    {
        throw new RuntimeException("Code branch coverage is "+actualBranchCoverage+"%, but expected is "+expectedBranchCoverage+"%.\n"+"Please check "+coverageReportPath +" for more detail.")
    }
}

checkTestCoverage.dependsOn jacocoTestReport

test.finalizedBy checkTestCoverage


idea {
    module {
        testSourceDirs += file('src/integrationTest/java')
        testSourceDirs += file('src/functionalTest/java')
        testSourceDirs += file('src/integrationTest/resources')
        testSourceDirs += file('src/functionalTest/resources')
        scopes.TEST.plus += [configurations.integrationTestCompile]
        scopes.TEST.plus += [configurations.integrationTestRuntime]
    }
}





