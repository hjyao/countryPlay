apply plugin: 'idea'
apply plugin: 'jetty'

[jettyRun, jettyRunWar, jettyStop]*.stopPort = 8081
[jettyRun, jettyRunWar, jettyStop]*.stopKey = 'stopKey'

war.archiveName "freewheelers.war"

jettyRun.contextPath = '/'

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

repositories {
    mavenCentral()
}

sourceSets {
    functionalTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }

    integrationTest {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    functionalTestCompile.extendsFrom testCompile
    functionalTestRuntime.extendsFrom testRuntime
}


dependencies {
    compile 'org.springframework:spring-webmvc:3.2.6.RELEASE'
    compile 'org.springframework:spring-jdbc:3.1.0.RELEASE'
    compile 'org.mybatis:mybatis:3.2.1'
    compile 'log4j:log4j:1.2.17'
    compile 'org.hibernate:hibernate-validator:4.2.0.Final'
    compile 'org.springframework.security:spring-security-taglibs:3.1.3.RELEASE'
    compile 'org.springframework.security:spring-security-config:3.1.3.RELEASE'
    compile 'postgresql:postgresql:9.1-901.jdbc4'
    providedCompile 'javax.servlet:servlet-api:2.5'
    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'org.apache.httpcomponents:httpclient:4.2.1'
    testCompile 'org.springframework:spring-test:3.2.6.RELEASE'
    testCompile 'org.seleniumhq.selenium:selenium-java:2.42.2'
}


task createDB(type: Exec) {
    workingDir 'db'
    commandLine './create.sh'
}


task initDB(type: Exec) {
    workingDir 'db/migrations'
    commandLine './mybatis/bin/migrate','up'
}


task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath + sourceSets.main.runtimeClasspath

    doFirst {
        jettyRun.daemon = true
        jettyRun.execute()
    }

    doLast {
        jettyStop.execute()
    }
}

idea {
    module {
        testSourceDirs += file('src/integrationTest/java')
        testSourceDirs += file('src/functionalTest/java')
        testSourceDirs += file('src/integrationTest/resources')
        testSourceDirs += file('src/functionalTest/resources')
        scopes.TEST.plus += configurations.integrationTestCompile
        scopes.TEST.plus += configurations.integrationTestRuntime
    }
}


initDB.dependsOn createDB
integrationTest.dependsOn initDB
functionalTest.dependsOn initDB
integrationTest.dependsOn test
check.dependsOn integrationTest
build.dependsOn functionalTest



